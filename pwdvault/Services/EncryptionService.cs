using System.Security.Cryptography;
using System.Text;
using Serilog;

namespace pwdvault.Services
{
    internal class EncryptionService
    {
        private const int IV_SIZE = 16; // 128 bits

        /// <summary>
        /// <para>
        /// This method take the new password and the encryption key and returns the encrypted password using AES256 encryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is randomly generated by AES, and is stored in the encrypted password returned, prior to the password by 16 bytes.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static byte[] EncryptPassword(string password, byte[] key)
        {
            try
            {
                Log.Logger.Information("Encrypting the password...");
                if (String.IsNullOrEmpty(password))
                {
                    throw new ArgumentException("The password is empty.");
                }
                if (key == null || key.Length == 0)
                {
                    throw new ArgumentException("The encryption key is either null or empty.");
                }

                using var aes = Aes.Create();
                aes.Key = key;
                aes.GenerateIV();

                using var memoryStream = new MemoryStream();
                memoryStream.Write(aes.IV, 0, IV_SIZE);

                using var cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write);
                var passwordBytes = Encoding.UTF32.GetBytes(password);
                cryptoStream.Write(passwordBytes, 0, passwordBytes.Length);

                return memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Log.Logger.Error("Source : " + ex.Source + ", Message : " + ex.Message + "\n" + ex.StackTrace);
                throw new Exception(ex.Message, ex);
            }
            
        }

        /// <summary>
        /// <para>
        /// This method take the encrypted password and the decryption key and returns the decrypted password using AES256 decryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is retrieved from the encrypted password, it corresponds to the first 16 bytes. 
        /// </para>
        /// </summary>
        /// <param name="encryptedPassword"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static string DecryptPassword(byte[] encryptedPassword, byte[] key)
        {
            try
            {
                Log.Logger.Information("Decrypting password...");
                if (encryptedPassword == null || encryptedPassword.Length == 0)
                {
                    throw new ArgumentException("The encrypted password is either null or empty.");
                }
                if (key == null || key.Length == 0)
                {
                    throw new ArgumentException("The decryption key is either null or empty.");
                }

                using var aes = Aes.Create();
                aes.Key = key;

                using var memoryStream = new MemoryStream(encryptedPassword);
                var iv = new byte[IV_SIZE];
                memoryStream.Read(iv, 0, IV_SIZE);
                aes.IV = iv;

                using var cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Read);
                var decryptedPasswordByte = new byte[encryptedPassword.Length];
                var byteCountPassword = cryptoStream.Read(decryptedPasswordByte, 0, encryptedPassword.Length);

                return Encoding.UTF32.GetString(decryptedPasswordByte, 0, byteCountPassword);
            }
            catch (Exception ex)
            {
                Log.Logger.Error("Source : " + ex.Source + ", Message : " + ex.Message + "\n" + ex.StackTrace);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// <para>
        /// This method takes the app's password and generate a new key for encrypting the password. The key generation is derived from the password.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <returns></returns>
        public static byte[] GenerateKey(string password)
        {
            Log.Logger.Information("Generating encryption key...");
            if (String.IsNullOrEmpty(password))
            {
                throw new ArgumentException("The password is empty.");
            }
            var salt = UserPasswordSecurity.GenerateSalt();
            return UserPasswordSecurity.GenerateHash(password, salt);
        }
    }
}
